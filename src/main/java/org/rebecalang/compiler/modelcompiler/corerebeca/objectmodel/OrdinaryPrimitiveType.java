//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-146 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.05.29 at 10:12:22 PM IRDT 
//

package org.rebecalang.compiler.modelcompiler.corerebeca.objectmodel;

import java.util.LinkedList;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

import org.rebecalang.compiler.modelcompiler.abstractrebeca.AbstractTypeSystem;

/**
 * <p>
 * Java class for OrdinaryPrimitiveType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name="OrdinaryPrimitiveType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://rebecalang.org/compiler/modelcompiler/corerebecaexpression}Type">
 *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "OrdinaryPrimitiveType", namespace = "http://rebecalang.org/compiler/modelcompiler/corerebecaexpression")
public class OrdinaryPrimitiveType extends Type {

	@XmlAttribute(name = "name")
	protected String name;

	/**
	 * Gets the value of the name property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getName() {
		return name;
	}

	/**
	 * Sets the value of the name property.
	 * 
	 * @param value allowed object is {@link String }
	 * 
	 */
	public void setName(String value) {
		this.name = value;
	}

	@Override
	public String getTypeName() {
		return this.getName();
	}

	public boolean canTypeUpCastTo(Type target) {
		if (!(target instanceof OrdinaryPrimitiveType))
			return false;

		if (target == AbstractTypeSystem.NULL_TYPE)
			return this.canTypeUpCastTo(AbstractTypeSystem.REACTIVE_CLASS_TYPE);
		if (this == AbstractTypeSystem.NULL_TYPE)
			return target.canTypeUpCastTo(AbstractTypeSystem.REACTIVE_CLASS_TYPE);
		
		LinkedList<Type> compatibilityCandidates = new LinkedList<Type>();
		compatibilityCandidates.add(this);
		do {
			Type candidate = compatibilityCandidates.removeFirst();
			if (candidate == target)
				return true;
			if (typeSystem.getCompatibilityMap().containsKey(candidate))
				compatibilityCandidates.addAll(typeSystem.getCompatibilityMap().get(candidate));
		} while (!compatibilityCandidates.isEmpty());
		return false;
	}
}
